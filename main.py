import os
import time

from interactor import *
from states import *

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InputFile, \
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import exceptions

MEMORY_STORAGE = MemoryStorage()

TOKEN = open('./token.txt', 'r', encoding='UTF-8').read()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot, storage=MEMORY_STORAGE)

OPTIONS = '''/recognize ‚Äî –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å
/voice ‚Äî –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç
/translate ‚Äî –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
/ortho ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—à–∏–±–∫–∏
/make_qr ‚Äî –°–¥–µ–ª–∞—Ç—å QR-–∫–æ–¥
/read_qr ‚Äî –°—á–∏—Ç–∞—Ç—å QR-–∫–æ–¥
/exchange ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã

/back - –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è'''

main_keyboard = ReplyKeyboardMarkup()
main_keyboard.row(KeyboardButton('/help'))
main_keyboard.row(KeyboardButton('/recognize'),
                  KeyboardButton('/voice'))
main_keyboard.row(KeyboardButton('/translate'),
                  KeyboardButton('/ortho'))
main_keyboard.row(KeyboardButton('/make_qr'),
                  KeyboardButton('/read_qr'))
main_keyboard.add(KeyboardButton('/exchange'))

help_keyboard = InlineKeyboardMarkup()
help_keyboard.row(InlineKeyboardButton('üìö /help', callback_data='/help'))
help_keyboard.row(InlineKeyboardButton('üëÇ /recognize', callback_data='/recognize'),
                  InlineKeyboardButton('üëÑ /voice', callback_data='/voice'))
help_keyboard.row(InlineKeyboardButton('üà∫ /translate', callback_data='/translate'),
                  InlineKeyboardButton('üìù /ortho', callback_data='/ortho'))
help_keyboard.row(InlineKeyboardButton('üèû /make_qr', callback_data='/make_qr'),
                  InlineKeyboardButton('üëÄ /read_qr', callback_data='/read_qr'))
help_keyboard.row(InlineKeyboardButton('üí∞ /exchange', callback_data='/exchange'))

back_keyboard = InlineKeyboardMarkup()
back_keyboard.add(InlineKeyboardButton('üîô /back', callback_data='/back'))

IETF = []   # –ò—Å–ø—Ä–∞–≤–∏—Ç—å


async def start_command(message: Message) -> None:
    with open('users.txt', 'r', encoding='UTF-8') as file:
        users = file.read()

    if str(message.from_id) not in users.split('\n'):
        users += '\n' + str(message.from_id)
        await message.answer('–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É:\n\n' + OPTIONS, reply_markup=main_keyboard)

    with open('users.txt', 'w', encoding='UTF-8') as file:
        file.write(users.strip())


async def help_command(message: Message) -> None:
    await message.answer('–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É:\n\n' + OPTIONS, reply_markup=help_keyboard)


# ----------------–ë–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–æ–≤----------------


async def count_command(message: Message) -> None:
    if await is_admin(message.from_id):
        with open('users.txt', 'r') as file:
            await message.answer(f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–ø—Ä–æ–±–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞: {len(file.readlines())}')


async def size_command(message: Message) -> None:
    if await is_admin(message.from_id):
        await message.answer(f'–†–∞–∑–º–µ—Ä –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç: {get_files_size()} –±–∞–π—Ç')


async def clear_command(message: Message) -> None:
    if await is_admin(message.from_id):
        clear()
        await message.answer('–í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')


async def state_command(message: Message, state: FSMContext) -> None:
    if await is_admin(message.from_id):
        await message.answer(str(await state.get_state()))


# ----------------–ë–ª–æ–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π----------------


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –ø–æ –µ–≥–æ id
async def is_admin(user_id: int) -> bool:
    with open('admins.txt', 'r') as file:
        return str(user_id) in map(lambda s: s.split('#')[0].strip(), file.read().split('\n'))


# ----------------–ë–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏----------------


async def send_recognized(message: Message) -> None:
    temp = await message.answer('–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...')

    if message.voice:
        file_id = message.voice.file_id
    else:
        file_id = message.audio.file_id

    file = await bot.get_file(file_id)

    filename = str(message.from_id) + '.wav'
    filepath = os.path.join(recognize_path, filename)
    while os.path.exists(filepath):
        await asyncio.sleep(0.25)

    try:
        await bot.download_file(file.file_path, filepath)
    except exceptions.FileIsTooBig:
        await message.answer('–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                             reply_markup=back_keyboard)
        return

    text = await recognize(filename)
    await message.answer(text)
    await temp.delete()

    os.remove(filepath)


async def recognize_command(message: Message) -> None:
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞',
                         reply_markup=back_keyboard)
    await RecognizeSteps.GET_VOICE.set()


async def recognize_get_voice(message: Message, state: FSMContext) -> None:
    await send_recognized(message)
    await state.finish()


# ----------------–ë–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏----------------


async def send_voiced(message: Message, text: str, lang: str = '') -> None:
    temp = await message.answer('–ù–∞—á–∞–ª–æ –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞...')

    filename = str(message.from_id) + '.wav'
    filepath = os.path.join(voice_path, filename)

    if lang == '':
        try:
            lang = detect(message.text)
        except ValueError:
            await message.answer('–ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n'
                                 '–ë—ã–ª –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –†—É—Å—Å–∫–∏–π —è–∑—ã–∫')
            lang = 'ru'

    if lang not in IETF:
        await temp.delete()
        await message.answer('–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫')
        return

    result = await voice(text, filename, lang)

    if result == 1:
        await message.answer(IETF_code_to_lang[lang] + ' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∑–≤—É—á–µ–Ω\n'
                                                  '–ë—ã–ª –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –†—É—Å—Å–∫–∏–π —è–∑—ã–∫')
        await voice(text, filename, 'ru')

    file = InputFile(filepath, filename=filename)

    await message.answer_voice(file)
    await temp.delete()

    os.remove(filepath)


async def voice_command(message: Message) -> None:
    await VoiceSteps.GET_TEXT.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏',
                         reply_markup=back_keyboard)


voice_choose_keyboard = InlineKeyboardMarkup()
voice_choose_keyboard.row(InlineKeyboardButton('ü§ñ /auto', callback_data='/auto'),
                          InlineKeyboardButton('üîé /choose', callback_data='/choose'))
voice_choose_keyboard.row(InlineKeyboardButton('üîô /back', callback_data='/back'))


async def voice_get_text(message: Message, state: FSMContext) -> None:
    if any(letter.isalpha() for letter in message.text) is False:
        await message.answer('–í —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                             reply_markup=back_keyboard)
        return

    async with state.proxy() as data:
        data['text'] = message.text

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞:\n'
                         '/auto ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n'
                         '/choose ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –≤—Ä—É—á–Ω—É—é',
                         reply_markup=voice_choose_keyboard)
    await VoiceSteps.ASK_METHOD.set()


async def voice_make_choice(message: Message, state: FSMContext, choice: str) -> None:
    match choice:
        case '/auto':
            await voice_auto_detect(message, state)
        case '/choose':
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º —è–∑—ã–∫–∞ (—Å–º. –≤ —Å–ø–∏—Å–∫–µ)\n'
                                 '\n'
                                 '–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –æ–∑–≤—É—á–∫–∏:\n'
                                 'af, ar, bg, bn, bs, ca, cs, da, de, el, en, es, et, fi, fr, gu, hi, hr, hu, id, is, '
                                 'it, ja, km, kn, ko, lv, ml, mr, ms, my, ne, nl, no, pl, pt, ro, ru, si, sk, sq, sr, '
                                 'sv, sw, ta, te, th, tr, uk, ur, vi, zh'
                                 '\n'
                                 '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–µ–≥–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ:'
                                 'https://en.wikipedia.org/wiki/IETF_language_tag',
                                 reply_markup=back_keyboard)
            await VoiceSteps.CHOOSE_LANG.set()


async def voice_text_choice(message: Message, state: FSMContext) -> None:
    await voice_make_choice(message, state, message.text.split()[0])


async def voice_button_choice(call: CallbackQuery, state: FSMContext) -> None:
    await voice_make_choice(call.message, state, call.data)
    await call.answer()
    await call.message.delete()


async def voice_auto_detect(message: Message, state: FSMContext) -> None:
    try:
        async with state.proxy() as data:
            lang = detect(data['text'])
    except ValueError:
        await message.answer('–ü—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã')
        await voice_make_choice(message, state, '/choose')
        return

    async with state.proxy() as data:
        await send_voiced(message, data['text'], lang)
        await state.finish()


async def voice_choose_lang(message: Message, state: FSMContext) -> None:
    if message.text not in IETF:
        await message.answer('–Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                             reply_markup=back_keyboard)
        return

    async with state.proxy() as data:
        await send_voiced(message, data['text'], message.text)
        await state.finish()


# ----------------–ë–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ–≤–æ–¥–∞----------------


async def translate_command(message: Message) -> None:
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞',
                         reply_markup=back_keyboard)
    await TranslateSteps.GET_TEXT.set()


translate_choose_keyboard = InlineKeyboardMarkup()
translate_choose_keyboard.row(InlineKeyboardButton('üëç /yes', callback_data='/yes'),
                              InlineKeyboardButton('üîé /choose', callback_data='/choose'))
translate_choose_keyboard.row(InlineKeyboardButton('üîô /back', callback_data='/back'))


async def translate_get_text(message: Message, state: FSMContext) -> None:
    if any(letter.isalpha() for letter in message.text) is False:
        await message.answer('–í —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                             reply_markup=back_keyboard)
        return

    async with state.proxy() as data:
        data['text'] = message.text

    try:
        lang_from = detect(message.text)
    except ValueError:
        await message.answer('–ü—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–º. –Ω–∞ —Å–∞–π—Ç–µ)\n'
                             '(https://en.wikipedia.org/wiki/IETF_language_tag)',
                             reply_markup=back_keyboard)
        await TranslateSteps.CHOOSE_LANG_FROM.set()
        return

    if lang_from not in IETF:
        await message.answer('–Ø–∑—ã–∫–∞ ' + lang_from + ' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–º. –Ω–∞ —Å–∞–π—Ç–µ)\n'
                             '(https://en.wikipedia.org/wiki/IETF_language_tag)',
                             reply_markup=back_keyboard)
        await TranslateSteps.CHOOSE_LANG_FROM.set()

    async with state.proxy() as data:
        data['lang_from'] = lang_from

    await message.answer(f'–≠—Ç–æ {IETF_code_to_lang[lang_from]} ({lang_from})?', reply_markup=translate_choose_keyboard)


async def translate_make_choice(message: Message, state: FSMContext, choice: str) -> None:
    match choice:
        case '/yes':
            await TranslateSteps.CHOOSE_LANG_TO.set()
        case '/choose':
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–º. –≤ —Å–ø–∏—Å–∫–µ)\n'
                                 '\n'
                                 '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–µ–≥–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ:'
                                 'https://en.wikipedia.org/wiki/IETF_language_tag',
                                 reply_markup=back_keyboard)
            await TranslateSteps.CHOOSE_LANG_FROM.set()


async def translate_text_choice(message: Message, state: FSMContext) -> None:
    await translate_make_choice(message, state, message.text.split()[0])


async def translate_button_choice(call: CallbackQuery, state: FSMContext) -> None:
    await translate_make_choice(call.message, state, call.data)
    await call.answer()
    await call.message.delete()


# async def translate_choose_lang_from(message: Message, state: FSMContext) -> None:


async def send_corrected(message: Message) -> None:
    temp = await message.answer('–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫...')

    corrected, matches, optional = await ortho(message.text)

    matches = [f'–í –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n'
               f'"{i[0]}"\n'
               f'–ë—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ "{i[1]}"\n'
               f'–ò –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ "{i[2]}"' for i in matches]

    optional = [f'–í –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n'
                f'"{i[0]}"\n'
                f'–ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ "{i[1]}"' for i in optional]

    if len(matches) != 0:
        await message.answer(corrected)
        await message.answer('–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏:\n\n' + '\n\n'.join(matches))
    else:
        await message.answer('–û—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

    if len(optional) != 0:
        await message.answer('–î–ª—è –±–æ–ª—å—à–µ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞:\n\n' +
                             '\n\n'.join(optional) +
                             '\n\n–ù–∞ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ')

    await temp.delete()


async def ortho_command(message: Message) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫')
    await OrthoSteps.GET_TEXT.set()


async def ortho_get_text(message: Message, state: FSMContext) -> None:
    await send_corrected(message)
    await state.finish()


async def send_qr_code(message: Message) -> None:
    temp = await message.answer('–ù–∞—á–∞–ª–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ QR-–∫–æ–¥...')

    filename = str(message.from_id) + '.png'
    filepath = os.path.join(make_qr_path, filename)

    result = await make_qr(message.text, filename)

    if result == -1:
        await message.answer('–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö')
        await temp.delete()
        return

    file = InputFile(filepath, filename=filename)

    await message.answer_photo(file)
    await temp.delete()

    os.remove(filepath)


async def make_qr_command(message: Message) -> None:
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ QR-–∫–æ–¥')
    await MakeQRSteps.GET_DATA.set()


async def make_qr_get_data(message: Message, state: FSMContext) -> None:
    await send_qr_code(message)
    await state.finish()


async def send_read(message: Message) -> None:
    temp = await message.answer('–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...')

    if message.photo:
        file_id = message.photo[0].file_id
    else:
        file_id = message.document.file_id

    file = await bot.get_file(file_id)

    filename = str(message.from_id) + '.wav'
    filepath = os.path.join(read_qr_path, filename)
    while os.path.exists(filepath):
        await asyncio.sleep(0.25)

    try:
        await bot.download_file(file.file_path, filepath)
    except exceptions.FileIsTooBig:
        await message.answer('–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                             reply_markup=back_keyboard)
        return

    text = await read_qr(filename)
    await message.answer(text)
    await temp.delete()

    os.remove(filepath)


async def read_qr_command(message: Message) -> None:
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º –¥–ª—è –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏')
    await ReadQRSteps.GET_IMAGE.set()


async def read_qr_get_image(message: Message, state: FSMContext) -> None:
    await send_read(message)
    await state.finish()


# ----------------–ë–ª–æ–∫ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π----------------


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–∞—à–∏–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
async def back_command(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        await message.delete()
        return
    await state.finish()
    await message.answer('–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã')
    await message.delete()


async def choose_by_button(call: CallbackQuery, state: FSMContext) -> None:
    await back_command(call.message, state)
    match call.data:
        case '/recognize':
            await recognize_command(call.message)
        case '/voice':
            await voice_command(call.message)
        case '/translate':
            await call.message.answer('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
        case '/ortho':
            await ortho_command(call.message)
        case '/make_qr':
            await make_qr_command(call.message)
        case '/read_qr':
            await make_qr_command(call.message)
        case '/exchange':
            await call.message.answer('–¢–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç')
        case '/help':
            await help_command(call.message)
    await call.answer()


# ----------------–ë–ª–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π----------------


def register_all_handlers() -> None:
    dp.register_message_handler(start_command, commands=['start'], state=None)
    dp.register_message_handler(help_command, commands=['help'], state='*')

    dp.register_message_handler(count_command, commands=['count'], state='*')
    dp.register_message_handler(size_command, commands=['size'], state='*')
    dp.register_message_handler(clear_command, commands=['clear'], state='*')
    dp.register_message_handler(state_command, commands=['state'], state='*')

    dp.register_message_handler(recognize_command, commands=['recognize'], state=None)
    dp.register_message_handler(recognize_get_voice,
                                content_types=[types.ContentType.AUDIO, types.ContentType.VOICE],
                                state=RecognizeSteps.GET_VOICE)

    dp.register_message_handler(voice_command, commands=['voice'], state=None)
    dp.register_message_handler(voice_get_text, content_types=[types.ContentType.TEXT], state=VoiceSteps.GET_TEXT)
    dp.register_message_handler(voice_text_choice, commands=['auto', 'choose'], state=VoiceSteps.ASK_METHOD)
    dp.register_callback_query_handler(voice_button_choice, state=VoiceSteps.ASK_METHOD)
    dp.register_message_handler(voice_choose_lang, content_types=[types.ContentType.TEXT], state=VoiceSteps.CHOOSE_LANG)

    dp.register_message_handler(ortho_command, commands=['ortho'], state=None)
    dp.register_message_handler(ortho_get_text, content_types=[types.ContentType.TEXT], state=OrthoSteps.GET_TEXT)

    dp.register_message_handler(make_qr_command, commands=['make_qr'], state=None)
    dp.register_message_handler(make_qr_get_data, content_types=[types.ContentType.TEXT], state=MakeQRSteps.GET_DATA)

    dp.register_message_handler(read_qr_command, commands=['read_qr'], state=None)
    dp.register_message_handler(read_qr_get_image,
                                content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT],
                                state=ReadQRSteps.GET_IMAGE)

    dp.register_message_handler(back_command, commands=['back'], state='*')

    dp.register_message_handler(send_recognized,
                                content_types=[types.ContentType.AUDIO, types.ContentType.VOICE], state='*')
    dp.register_message_handler(read_qr_get_image,
                                content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT],
                                state='*')

    dp.register_callback_query_handler(choose_by_button, state='*')


async def start_bot() -> None:
    check_dirs()
    clear()
    on_start()
    register_all_handlers()

    try:
        await dp.start_polling()
    finally:
        await bot.session.close()


if __name__ == '__main__':
    a = '''af - –ê—Ñ—Ä–∏–∫–∞–∞–Ω—Å
ak - –ê–∫–∞–Ω
am - –ê–º—Ö–∞—Ä—Å–∫–∏–π
ar - –ê—Ä–∞–±—Å–∫–∏–π
as - –ê—Å—Å–∞–º—Å–∫–∏–π
ay - –ê–π–º–∞—Ä–∞
az - –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π
be - –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π
bg - –ë–æ–ª–≥–∞—Ä—Å–∫–∏–π
bho - –ë—Ö–æ–¥–∂–ø—É—Ä–∏
bm - –ë–∞–º–±–∞—Ä–∞
bn - –ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π
bs - –ë–æ—Å–Ω–∏–π—Å–∫–∏–π
ca - –ö–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π
ceb - –°–µ–±—É–∞–Ω—Å–∫–∏–π
ckb - –ö—É—Ä–¥—Å–∫–∏–π (—Å–æ—Ä–∞–Ω–∏)
co - –ö–æ—Ä—Å–∏–∫–∞–Ω—Å–∫–∏–π
cs - –ß–µ—à—Å–∫–∏–π
cy - –í–∞–ª–ª–∏–π—Å–∫–∏–π
da - –î–∞—Ç—Å–∫–∏–π
de - –ù–µ–º–µ—Ü–∫–∏–π
doi - –î–æ–≥—Ä–∏
dv - –ú–∞–ª—å–¥–∏–≤—Å–∫–∏–π
ee - –≠–≤–µ
el - –ì—Ä–µ—á–µ—Å–∫–∏–π
en - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
eo - –≠—Å–ø–µ—Ä–∞–Ω—Ç–æ
es - –ò—Å–ø–∞–Ω—Å–∫–∏–π
et - –≠—Å—Ç–æ–Ω—Å–∫–∏–π
eu - –ë–∞—Å–∫—Å–∫–∏–π
fa - –ü–µ—Ä—Å–∏–¥—Å–∫–∏–π
fi - –§–∏–Ω—Å–∫–∏–π
fr - –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
fy - –§—Ä–∏–∑—Å–∫–∏–π
ga - –ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π
gd - –®–æ—Ç–ª–∞–Ω–¥—Å–∫–∏–π (–≥—ç–ª—å—Å–∫–∏–π)
gl - –ì–∞–ª–∏—Å–∏–π—Å–∫–∏–π
gn - –ì—É–∞—Ä–∞–Ω–∏
gom - –ì–æ–∞–Ω—Å–∫–∏–π
gu - –ì—É–¥–∂–∞—Ä–∞—Ç–∏
ha - –•–∞—É—Å–∞
haw - –ì–∞–≤–∞–π—Å–∫–∏–π
hi - –•–∏–Ω–¥–∏
hmn - –•–º–æ–Ω–≥
hr - –•–æ—Ä–≤–∞—Ç—Å–∫–∏–π
ht - –ì–∞–∏—Ç—è–Ω—Å–∫–∏–π –∫—Ä–µ–æ–ª—å—Å–∫–∏–π
hu - –í–µ–Ω–≥–µ—Ä—Å–∫–∏–π
hy - –ê—Ä–º—è–Ω—Å–∫–∏–π
id - –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π
ig - –ò–≥–±–æ
ilo - –ò–ª–æ–∫–∞–Ω–æ
is - –ò—Å–ª–∞–Ω–¥—Å–∫–∏–π
it - –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π
iw - –ò–≤—Ä–∏—Ç
ja - –Ø–ø–æ–Ω—Å–∫–∏–π
jw - –Ø–≤–∞–Ω—Å–∫–∏–π
ka - –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π
kk - –ö–∞–∑–∞—Ö—Å–∫–∏–π
km - –ö—Ö–º–µ—Ä—Å–∫–∏–π
kn - –ö–∞–Ω–Ω–∞–¥–∞
ko - –ö–æ—Ä–µ–π—Å–∫–∏–π
kri - –ö—Ä–∏–æ–ª—å—Å–∫–∏–π
ku - –ö—É—Ä–¥—Å–∫–∏–π
ky - –ö–∏—Ä–≥–∏–∑—Å–∫–∏–π
la - –õ–∞—Ç—ã–Ω—å
lb - –õ—é–∫—Å–µ–º–±—É—Ä–≥—Å–∫–∏–π
lg - –õ—É–≥–∞–Ω–¥–∞
ln - –õ–∏–Ω–≥–∞–ª–∞
lo - –õ–∞–æ—Å—Å–∫–∏–π
lt - –õ–∏—Ç–æ–≤—Å–∫–∏–π
lus - –ú–∏–∑–æ
lv - –õ–∞—Ç—ã—à—Å–∫–∏–π
mai - –ú–∞–π—Ç—Ö–∏–ª–∏
mg - –ú–∞–ª–∞–≥–∞—Å–∏–π—Å–∫–∏–π
mi - –ú–∞–æ—Ä–∏
mk - –ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π
ml - –ú–∞–ª–∞—è–ª–∞–º
mn - –ú–æ–Ω–≥–æ–ª—å—Å–∫–∏–π
mni-Mtei - –ú–∞–Ω–∏–ø—É—Ä–∏ (–º—ç–π—Ç—ç–π)
mr - –ú–∞—Ä–∞—Ç—Ö–∏
ms - –ú–∞–ª–∞–π—Å–∫–∏–π
mt - –ú–∞–ª—å—Ç–∏–π—Å–∫–∏–π
my - –ë–∏—Ä–º–∞–Ω—Å–∫–∏–π
ne - –ù–µ–ø–∞–ª—å—Å–∫–∏–π
nl - –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π
no - –ù–æ—Ä–≤–µ–∂—Å–∫–∏–π
nso - –°–æ—Ç–æ —Å–µ–≤–µ—Ä–Ω—ã–π
ny - –ß–∏–Ω—å—è–Ω–¥–∂–∞
om - –û—Ä–æ–º–æ
or - –û—Ä–∏—è
pa - –ü–∞–Ω–¥–∂–∞–±–∏
pl - –ü–æ–ª—å—Å–∫–∏–π
ps - –ü—É—à—Ç—É
pt - –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π
qu - –ö–µ—á—É–∞
ro - –†—É–º—ã–Ω—Å–∫–∏–π
ru - –†—É—Å—Å–∫–∏–π
rw - –ö–∏–Ω—å—è—Ä—É–∞–Ω–¥–∞
sa - –°–∞–Ω—Å–∫—Ä–∏—Ç
sd - –°–∏–Ω–¥—Ö–∏
si - –°–∏–Ω–≥–∞–ª—å—Å–∫–∏–π
sk - –°–ª–æ–≤–∞—Ü–∫–∏–π
sl - –°–ª–æ–≤–µ–Ω—Å–∫–∏–π
sm - –°–∞–º–æ–∞–Ω—Å–∫–∏–π
sn - –®–æ–Ω–∞
so - –°–æ–º–∞–ª–∏
sq - –ê–ª–±–∞–Ω—Å–∫–∏–π
sr - –°–µ—Ä–±—Å–∫–∏–π
st - –°–æ—Ç–æ —é–∂–Ω—ã–π
su - –°—É–Ω–¥–∞–Ω—Å–∫–∏–π
sv - –®–≤–µ–¥—Å–∫–∏–π
sw - –°—É–∞—Ö–∏–ª–∏
ta - –¢–∞–º–∏–ª—å—Å–∫–∏–π
te - –¢–µ–ª—É–≥—É
tg - –¢–∞–¥–∂–∏–∫—Å–∫–∏–π
th - –¢–∞–π—Å–∫–∏–π
ti - –¢–∏–≥—Ä–∏–Ω—å—è
tk - –¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π
tl - –¢–∞–≥–∞–ª—å—Å–∫–∏–π
tr - –¢—É—Ä–µ—Ü–∫–∏–π
ts - –ß–æ–Ω–≥–∞
tt - –¢–∞—Ç–∞—Ä—Å–∫–∏–π
ug - –£–π–≥—É—Ä—Å–∫–∏–π
uk - –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π
ur - –£—Ä–¥—É
uz - –£–∑–±–µ–∫—Å–∫–∏–π
vi - –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π
xh - –ö–æ—Å–∞
yi - –ò–¥–∏—à
yo - –ô–æ—Ä—É–±–∞
zh-CN - –ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
zh-TW - –ö–∏—Ç–∞–π—Å–∫–∏–π (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π)
zu - –ó—É–ª—É'''
    for n, i in enumerate([' '.join([j if j != '-' else '‚Äì' for j in i.split()]) for i in a.split('\n')]):
        b = f'{n + 1}. {i.split()[0]} - {i[i.index("‚Äì") + 2:]}'
        if b[-2] + b[-1] == '–∏–π':
            b += ' —è–∑—ã–∫'
        else:
            b = b.split()
            b.insert(3, '–Ø–∑—ã–∫')
            b = ' '.join(b)
        print(b)
    # asyncio.run(start_bot())
    # af, sq, am, ar, hy, as, ay, az, bm, eu, be, bn, bho, bs, bg, ca, ceb, ny, zh-CN, zh-TW, co, hr, cs, da, dv, doi, nl, en, eo, et, ee, tl, fi, fr, fy, gl, ka, de, el, gn, gu, ht, ha, haw, iw, hi, hmn, hu, is, ig, ilo, id, ga, it, ja, jw, kn, kk, km, rw, gom, ko, kri, ku, ckb, ky, lo, la, lv, ln, lt, lg, lb, mk, mai, mg, ms, ml, mt, mi, mr, mni-Mtei, lus, mn, my, ne, no, or, om, ps, fa, pl, pt, pa, qu, ro, ru, sm, sa, gd, nso, sr, st, sn, sd, si, sk, sl, so, es, su, sw, sv, tg, ta, tt, te, th, ti, ts, tr, tk, ak, uk, ur, ug, uz, vi, cy, xh, yi, yo, zu 133
